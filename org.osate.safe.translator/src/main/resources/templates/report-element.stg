report(model, name, timestamp) ::=<<
<header(name, timestamp)>
<tblOfContents()>
<fundamentals(model, name)>
<decomposition(model)>
<processModel(model)>
<externalInteractions(model)>
<internalFaults(model)>
>>

header(name, timestamp) ::=<<
# T-SAFE: Analysis of <name>

*This report was generated by the [MDCF Architect](http://santoslab.org/pub/mdcf-architect/) on <timestamp>*

>>

tblOfContents() ::=<<
## Table of Contents

1. [Fundamentals](#fundamentals)
2. [Decomposition](#decomposition)
	1. [Control Structure](#control-structure)
	2. [Components](#components)
	3. [Connections](#connections)
3. [Process Model](#process-model)
4. [External Interactions](#external-interactions)
	1. [Successor Dangers](#successor-dangers)
	2. [Manifestions](#manifestations)
	3. [Externally Caused Dangers](#externally-caused-dangers)
	4. [Sunk Dangers](#sunk-dangers)
5. [Internal Faults](#internal-faults)
	1. [Faults Not Considered](#faults-not-considered)
	2. [Internally Caused Dangers](#internally-caused-dangers)

>>

fundamentals(model, name) ::=<<
## Fundamentals

* Element Name: <name>
* Element Type: <model.name>
* Successor Link Names:
	<model.sendPorts.keys:{k | <linkName(k, model.sendPorts.(k))>
}>* Predecessor Link Names:
	<model.receivePorts.keys:{k | <linkName(k, model.receivePorts.(k))>
}>* Classification: <model.componentTypeAsString>

>>

decomposition(model) ::=<<
## Decomposition

### Components

<model.children.keys:{k | <component(k, model.children.(k))>
}>

### Connections

<model.channels.keys:{k | <connection(k, model.channels.(k))>
}>

>>

processModel(model) ::=<<

## Process Model

<model.processModel.values : {v | <processVariable(v)>
}>
>>

processVariable(model) ::=<<
* <model.name> (<model.type>): <if(model.numeric)><model.minVal> -- <model.maxVal> <endif><model.units>
>>

externalInteractions(model) ::=<<

## External Interactions

### Successor Dangers

<model.sendPorts.values:{p | <succDanger(p)>
}>

### Manifestations

<model.receivePorts.values:{p | <manifestation(p)>
}>

### Externally Caused Dangers

<model.externallyCausedDangers.values:{e | <externallyCausedDanger(e)>
}>

### Sunk Dangers

<model.sunkDangers.values:{e | <sunkDanger(e)>
}>

>>

internalFaults(model) ::=<<

## Internal Faults

### Faults Not Considered

<model.eliminatedFaults.keys:{f | <eliminatedFaults(f, model.eliminatedFaults.(f))>
}>

### Internally Caused Dangers

<model.internallyCausedDangers.values:{e | <internallyCausedDanger(e)>
}>

### Missed Fault Classes

* <model.missedFaultClasses; separator="
* ">

>>

linkName(name, model) ::=<<
* <name> (<model.type>)
>>

component(elemName, model) ::=<<
#. [<elemName>](<elemName; format="MarkdownInterLink">): <model.name>
>>

connection(elemName, model) ::=<<
#. <elemName>: <model.pubName>.<model.pubPortName> -> <model.subName>.<model.subPortName> [<model.subscriber.ports.(model.subPortName).type; null=model.publisher.ports.(model.pubPortName).type>]
>>
succDanger(portModel) ::=<<
* <portModel.name>: {<portModel.propagatableErrors.values :{pe | <pe.name>}; separator=", ">}
>>

manifestation(portModel) ::=<<
* <portModel.name>: {<portModel.propagatableErrors.values :{pe | <if(pe.sunk)>~~<endif><pe.name> (<pe.manifestationName>)<if(pe.sunk)>~~<endif>}; separator=", ">}
>>

danger(dModel) ::=<<
* <dModel.name>: <dModel.interp>
	* *Successor Danger(s)* <dModel.successorDanger.port.name>: <dModel.successorDanger.errors:{e | <e.name> (<e.manifestationName>)}; separator=", ">
>>

externallyCausedDanger(ecdModel) ::=<<
<danger(ecdModel)>
	* *Manifestation(s)* <ecdModel.danger.port.name>: <ecdModel.danger.errors:{e | <e.name> (<e.manifestationName>)}; separator=", ">
	* *Process Variable* <ecdModel.processVariable.name>: <ecdModel.processVariableConstraint>
>>

sunkDanger(sdModel) ::=<<
<danger(sdModel)>
	* *Detections* 
		* <sdModel.runtimeDetections:{d | <d.name>: <d.explanation> (<d.approachStr>)}; separator="
* ">
	* *Handlings* 
		* <sdModel.runtimeHandlings:{d | <d.name>: <d.explanation> (<d.errorHandlingApproach>)}; separator="
* ">
>>

internallyCausedDanger(icdModel) ::=<<
<danger(icdModel)>
	* *Fault Class(es)* <icdModel.faultClasses; separator=", ">
	* *Run-time Detections* 
		* <icdModel.runtimeDetections:{d | <d.name>: <d.explanation> (<d.approachStr>)}; separator="
* ">
	* *Handlings* 
		* <icdModel.runtimeHandlings:{d | <d.name>: <d.explanation> (<d.errorHandlingApproach>)}; separator="
* ">
>>

eliminatedFaults(justification, faultSet) ::=<<
* <justification>
	* <faultSet; separator="
	* ">
>>