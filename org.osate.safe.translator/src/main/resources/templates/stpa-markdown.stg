report(model) ::=<<
<header(model)>
<tblOfContents(model)>
<background(model)>
<preliminaries(model)>
<componentLevels(model)>
>>

header(model) ::=<<
# STAMP-Report: <model.name>

*This report was generated by the [MDCF Architect](http://santoslab.org/pub/mdcf-architect/) on <model.timestamp>*

>>

tblOfContents(model) ::=<<
## Table of Contents

1. [Background](#background)
	1. [Context](#context)
	2. [Assumptions](#assumptions)
	3. [Abbreviations](#abbreviations)
2. [Depth: 1](#depth-1)
	1. [<model.name>](<model.name; format="MarkdownIntraLink">)
		1. [Fundamentals](#fundamentals)
		2. [Boundaries and Structure](#boundaries-and-structure)
		3. [Unsafe Control Actions](#unsafe-control-actions)
		4. [Causes and Compensations](#causes-and-compensations)
3. [Depth: 2](#depth-2)
	<model.logicComponents.keys:{k | <tocDepth(model.logicComponents.(k), i)>
}>
>>

tocDepth(procModel, i) ::=<<
<i>. [<procModel.name>](<procModel.name; format="MarkdownIntraLink">)	
>>

background(model) ::=<<

## Background

### Context
<model.hazardReportContext>

### Assumptions
<model.hazardReportAssumptions:{a | * <a>
}>

### Abbreviations
<model.hazardReportAbbreviations:{a | <a.name>
~   <a.full>: <a.definition>
}>

>>

preliminaries(model) ::=<<
## Fundamentals

### Accident Levels
<model.accidentLevels.keys:{k | <accidentLevel(model.accidentLevels.(k), i)>
}>
### Accidents
<model.accidents.keys:{k | <preliminary(model.accidents.(k), i)>
}>
### Hazards
<model.hazards.keys:{k | <preliminary(model.hazards.(k), i)>
}>
### Safety Constraints
<model.constraints.values:{v | <preliminary(v, i)>
}>

>>

accidentLevel(accLvl, i) ::=<<
<i>. **<accLvl.name>**: <accLvl.description>
>>

preliminary(prelim, i) ::=<<
<i>. **<prelim.name>**: <prelim.description> [<prelim.parent.name>]
>>

componentLevels(model) ::=<<
## Depth: 1

<componentLevel(model)>
## Depth: 2

<model.logicComponents.keys:{k | <componentLevel(model.logicComponents.(k))>
}>
>>

componentLevel(model) ::=<<
### <model.name>

#### Control Actions
<model.controlActions.values:{v | <controlAction(v, i)>
}>
#### Boundaries and Structure
![System Boundaries and Control Structure](<model.hazardReportDiagrams.("SystemBoundary")>)

<ctrlActTbl(model)>
<hazCtrlActs(model)>
>>

controlAction(ctrlAct, i) ::=<<
<i>. <ctrlAct.name>: <ctrlAct.publisher.name> -> <ctrlAct.subscriber.name> (<ctrlAct.publisher.ports.(ctrlAct.pubPortName).type>) 
>>

ctrlActTbl(model) ::=<<
#### Unsafe Control Actions

<if(model.controlActions.values)>
| <["Control Action", "Providing", "Not Providing", "Applied Too Long", "Stopped Too Soon", "Early", "Late"]:{g | <g> | }>
|----------------|-----------|---------------|------------------|------------------|-------|------|
<model.controlActions.values:{v | <ctrlActTblRow(v)>
}>
<endif>
<if(model.rangedControlActions.values)>
| <["Control Action", "Value Too High", "Value Too Low"]:{g | <g> | }>
|----------------|----------------|---------------|
<model.rangedControlActions.values:{v | <rngdCtrlActTblRow(v)>
}>
<endif>
>>

ctrlActTblRow(ctrlAct) ::=<<
| [<ctrlAct.name>](#<ctrlAct.name>) | <["PROVIDING", "NOTPROVIDING", "APPLIEDTOOLONG", "STOPPEDTOOSOON", "EARLY", "LATE"]:{g | <ctrlActTblCell(ctrlAct.occurrenceMap.(g))>}>
>>

ctrlActTblCell(lastOccurrence) ::=<<
 <lastOccurrence:{o|<o.hazard.name> (<o.title>)}; separator=", "> | >>

rngdCtrlActTblRow(rngdCtrlAct) ::=<<
| [<rngdCtrlAct.name>](#<rngdCtrlAct.name>) | <["VALUEHIGH", "VALUELOW"]:{g | <rngdCtrlActTblCell(rngdCtrlAct.occurrenceMap.(g))>}>
>>

rngdCtrlActTblCell(lastOccurrence) ::=<<
 <lastOccurrence:{o|<o.hazard.name> (<o.title>)}; separator=", "> | >>

hazCtrlActs(model) ::=<<
#### Causes and Compensations

<model.controlActions.values:{v | <hazControlAction(v)>
}>
>>

hazControlAction(ctrlAct) ::=<<
##### <ctrlAct.name>
<ctrlAct.occurrences:{o | <occurrenceBlock(o)>
}>
>>

occurrenceBlock(occ) ::=<<
* **<occ.keyword>**: <occ.title>
	* Cause: <occ.cause>
	* Compensation: <occ.compensation>
>>