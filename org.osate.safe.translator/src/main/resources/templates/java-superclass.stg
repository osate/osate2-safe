class(model) ::=<<
<packageAndImports(model)>
<headerAndFields(model)>

  <portDeclarations(model)>
  
  <constructor(model)>
  <initAndGetters(model)>
  <subAndPubChannelAssignments(model)>
  <if(model.pseudoDevice)>
    <forwardMethods(model)>
  <else>
    <abstractMethods(model)>
  <endif>
  <concreteMethods(model)>
  <tasks(model)>
}
>>

tasks(model) ::=<<
<model.sporadicTasks.keys:{k |<sporadicTask(k, model.sporadicTasks.(k))>}>
<model.periodicTasks.keys:{k |<periodicTask(k, model.periodicTasks.(k))>}>
>>

sporadicTask(taskName, taskModel) ::=<<


public class <taskName>Task implements Task {
<[taskModel.incomingGlobals, taskModel.outgoingGlobals]:{vm | <globalDeclaration(vm.innerName, vm.type)>
}>
  @Override
  public void run() {
    <taskModel.incomingGlobals:{vm | <initGlobal(vm.innerName, vm.outerName)>
    }>
    MdcfMessage message = <taskModel.trigPortName>ReceiverPort.getReceiver().getLastMsg();
    <if(!taskModel.trigPort.event)>
      try {
        <taskModel.trigPortType> <taskModel.trigPortLocalName>Data = <taskModel.trigPortName>ReceiverPort.getLastMsgContent();
        <taskModel.trigPortName>ListenerOnMessage(message, <taskModel.trigPortLocalName>Data);
      } catch (MdcfDecodeMessageException e) {
        System.err.println(getComponentTypeName() + ".<taskName>Task task: invalid message:" + message.getTextMsg());
        e.printStackTrace();
      }
    <else>
      <taskModel.trigPortName>ListenerOnMessage(message);
    <endif>
    <taskModel.outgoingGlobals:{vm | <updateGlobal(vm.innerName, vm.outerName)>
    }>
  }
}
>>

periodicTask(taskName, taskModel) ::=<<


public class <taskName>Task implements Task {
<[taskModel.incomingGlobals, taskModel.outgoingGlobals]:{vm | <globalDeclaration(vm.innerName, vm.type)>
}>
  @Override
  public void run() {
    <taskModel.incomingGlobals:{vm | <initGlobal(vm.innerName, vm.outerName)>
    }>
      <taskName>Method();
    <taskModel.outgoingGlobals:{vm | <updateGlobal(vm.innerName, vm.outerName)>
    }>
  }
}
>>

initGlobal(innerName, outerName) ::=<<
<innerName> = get<outerName>();
>>

updateGlobal(innerName, outerName) ::=<<
set<outerName>(<innerName>);
>>

forwardMethods(model) ::=<<


private void initComponent(){
  // Do nothing, pseudodevices require no initialization
}

<model.receiveEventDataPorts.keys:{k |<forwardListener(k, model.receiveEventDataPorts.(k).type, model.outPortNames.(k))>
}>
<model.receiveEventPorts.keys:{k |<forwardListener(k, model.receiveEventPorts.(k).type, model.outPortNames.(k))>
}>
>>

forwardListener(portName, portType, otherName) ::=<<
private void <portName>ListenerOnMessage(MdcfMessage msg, <portType> <portName>Data){
  <otherName>SenderPort.send(<portName>Data);
}
>>

abstractMethods(model) ::=<<


protected abstract void initComponent();
  
<model.receiveEventDataPorts.keys:{k |<abstractTypedListener(k, model.receiveEventDataPorts.(k).type)>
}>
<model.receiveEventPorts.keys:{k |<abstractUntypedListener(k, model.receiveEventPorts.(k).type)>
}>
<model.periodicTasks.keys:{k |<abstractPeriodicTask(k)>
}>
>>

abstractPeriodicTask(taskName) ::=<<
protected abstract void <taskName>Method();
>>

abstractTypedListener(portName, portType) ::=<<
protected abstract void <portName>ListenerOnMessage(MdcfMessage msg, <portType> <portName>Data);
>>

abstractUntypedListener(portName, portType) ::=<<
protected abstract void <portName>ListenerOnMessage(MdcfMessage msg);
>>

concreteMethods(model) ::=<<
<model.receiveDataPorts.keys:{k |<concreteListener(k, model.receiveDataPorts.(k).type)>
}>
>>

concreteListener(portName, portType) ::=<<
private void <portName>ListenerOnMessage(MdcfMessage msg, <portType> <portName>Data){
	this.<portName>Data = <portName>Data; 
}
>>

subAndPubChannelAssignments(model) ::=<<
@Override
public void processSubscriberChannelAssignment(SubChannelAssignmentMsg subAssign) {
  <model.receivePorts.keys:{k |<subChannelAssignment(k)>
  }>}

@Override
public void processPublisherChannelAssignment(PubChannelAssignmentMsg pubAssign) {
  <model.sendPorts.keys:{k |<pubChannelAssignment(k)>
  }>}
>>

pubChannelAssignment(exchName) ::=<<
publisherChannelAssignmentHelper(pubAssign, this.<exchName>SenderPort);
>>

subChannelAssignment(exchName) ::=<<
subscriberChannelAssignmentHelper(subAssign, this.<exchName>ReceiverPort);
>>

initAndGetters(model) ::=<<


@Override
public void init(){
  initComponent();
}

@Override
protected Map\<String, Task> getTaskInstanceMap() {
  return this.taskInstanceMap;
}

@Override
protected Map\<String, MdcfReceiverPort\<?>\> getReceiverPortMap(){
  return this.receiverPortMap;
}

<model.receiveDataPorts.keys:{k |<getter(k, model.receiveDataPorts.(k).type)>
}>
>>

getter(name, type) ::=<<
protected <type> get<name>Data(){
  return <name>Data;
}

>>

setter(name, type) ::=<<
private void set<name>(<type> val){
  <name> = val;
}

>>

constructor(model) ::=<<
<if(model.pseudoDevice)>
public <model.name>(String GUID, String host) {
<else>
public <model.name>SuperType(String GUID, String host) {
<endif>
  super(GUID, "<model.name>", host);
  taskInstanceMap = new HashMap\<>();
  receiverPortMap = new HashMap\<>();
  <model.ports.values:{v |<initPort(v)>
  }><model.children.keys:{k |<taskInstanceMapEntry(k)>
  }><model.receivePorts.keys:{k |<receiverPortMapEntry(k)>
  }>}
>>

initPort(port) ::=<<
<if(port.subscribe)>
<port.name>ReceiverPort = new MdcfReceiverPort\<<port.type>\>("<port.name>", <port.type>.class, host);<else>
<port.name>SenderPort = new MdcfSenderPort\<<port.type>\>("<port.name>", <port.type>.class, host);<endif> 
>>

receiverPortMapEntry(exchName) ::=<<
  receiverPortMap.put(<exchName>ReceiverPort.getName(), <exchName>ReceiverPort);
>>

taskInstanceMapEntry(exchName) ::=<<
taskInstanceMap.put(<exchName>Task.class.getSimpleName(), new <exchName>Task());
>>

portDeclarations(model) ::=<<
  <model.ports.values:{v |<portDeclaration(v)>}>
>>

portDeclaration(port) ::=<<
<if(port.subscribe)>
private MdcfReceiverPort\<<port.type>\> <port.name>ReceiverPort;<else>
protected MdcfSenderPort\<<port.type>\> <port.name>SenderPort;<endif> 
>>

headerAndFields(model) ::=<<
<if(model.display)>
public abstract class <model.name>SuperType extends AppPanelComponent{
<elseif(model.pseudoDevice)>
public class <model.name> extends LogicComponent{
<else>
public abstract class <model.name>SuperType extends LogicComponent{
<endif>
  private HashMap\<String, Task> taskInstanceMap;
  private HashMap\<String, MdcfReceiverPort\<?>\> receiverPortMap;
<model.receiveDataPorts.keys:{k |<globalDeclaration(k, model.receiveDataPorts.(k).type)>
}> >>

globalDeclaration(name, type) ::=<<
  private <type> <name>Data;
>>

packageAndImports(model) ::=<<
package mdcf.app.<model.parentName>;

import java.util.HashMap;
import java.util.Map;

import mdcf.channelservice.common.MdcfDecodeMessageException;
import mdcf.channelservice.common.MdcfMessage;
import mdcf.channelservice.common.MdcfReceiverPort;
import mdcf.channelservice.common.MdcfSenderPort;
import mdcf.core.ctypes.Task;
<if(model.display)>
import mdcf.core.ctypes.apppanel.AppPanelComponent;
<else>
import mdcf.core.ctypes.logic.LogicComponent;
<endif>
import mdcf.core.messagetypes.devicemgmt.PubChannelAssignmentMsg;
import mdcf.core.messagetypes.devicemgmt.SubChannelAssignmentMsg;
>>